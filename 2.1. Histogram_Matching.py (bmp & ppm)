import math
import struct
import matplotlib.pyplot as plt

# Đọc ảnh BMP (24-bit) và PPM (P6)
def detect_format(file_path):
    with open(file_path, 'rb') as f:
        header = f.read(2)
        if header == b'BM':
            return "BMP"
        elif header[:2] == b'P6':
            return "PPM"
        else:
            raise ValueError("Định dạng ảnh không được hỗ trợ!")

def read_bmp(file_path):
    with open(file_path, 'rb') as f:
        header = f.read(14)
        dib_header = f.read(40)

        width = struct.unpack('<I', dib_header[4:8])[0]
        height = struct.unpack('<I', dib_header[8:12])[0]
        bit_count = struct.unpack('<H', dib_header[14:16])[0]
        compression = struct.unpack('<I', dib_header[16:20])[0]

        if bit_count != 24 or compression != 0:
            raise ValueError("Chỉ hỗ trợ ảnh BMP 24-bit không nén!")

        offset = struct.unpack('<I', header[10:14])[0]
        row_size = (width * 3 + 3) // 4 * 4
        f.seek(offset)

        pixels = []
        for y in range(height):
            row = []
            for x in range(width):
                b, g, r = struct.unpack('BBB', f.read(3))
                row.append((r, g, b))
            f.read(row_size - width * 3)
            pixels.append(row)
        return width, height, pixels

def read_ppm(file_path):
    with open(file_path, 'rb') as f:
        header = f.readline().decode().strip()
        if header != "P6":
            raise ValueError("Chỉ hỗ trợ ảnh PPM dạng P6!")
        dimensions = f.readline().decode().strip().split()
        width, height = map(int, dimensions)
        max_val = int(f.readline().decode().strip())
        if max_val != 255:
            raise ValueError("Giá trị tối đa của ảnh không phải 255!")
        pixels = []
        for y in range(height):
            row = []
            for x in range(width):
                r, g, b = struct.unpack('BBB', f.read(3))
                row.append((r, g, b))
            pixels.append(row)
        return width, height, pixels

# Ghi ảnh BMP (24-bit) và PPM (P6)
def write_bmp(file_path, width, height, pixels):
    with open(file_path, 'wb') as f:
        row_size = (width * 3 + 3) // 4 * 4
        padding = row_size - width * 3
        pixel_data_size = row_size * height
        file_size = 14 + 40 + pixel_data_size

        f.write(b'BM')
        f.write(struct.pack('<I', file_size))
        f.write(b'\x00\x00')
        f.write(b'\x00\x00')
        f.write(struct.pack('<I', 54))

        f.write(struct.pack('<I', 40))
        f.write(struct.pack('<I', width))
        f.write(struct.pack('<I', height))
        f.write(struct.pack('<H', 1))
        f.write(struct.pack('<H', 24))
        f.write(struct.pack('<I', 0))
        f.write(struct.pack('<I', pixel_data_size))
        f.write(struct.pack('<I', 2835))
        f.write(struct.pack('<I', 2835))
        f.write(struct.pack('<I', 0))
        f.write(struct.pack('<I', 0))

        for row in pixels:
            for r, g, b in row:
                f.write(struct.pack('BBB', b, g, r))
            f.write(b'\x00' * padding)

def write_ppm(file_path, width, height, pixels):
    with open(file_path, 'wb') as f:
        f.write(b"P6\n")
        f.write(f"{width} {height}\n".encode())
        f.write(b"255\n")
        for row in pixels:
            for r, g, b in row:
                f.write(struct.pack('BBB', r, g, b))

# Tính histogram
def compute_histogram(width, height, pixels):
    histogram = [0] * 256
    for row in pixels:
        for r, g, b in row:
            grayscale = int(0.299 * r + 0.587 * g + 0.114 * b)
            histogram[grayscale] += 1
    return histogram

# Tính CDF từ histogram
def compute_cdf(histogram):
    cdf = [sum(histogram[:i+1]) for i in range(len(histogram))]
    return cdf

# Histogram Matching
def histogram_matching(width, height, pixels, target_histogram):
    original_histogram = compute_histogram(width, height, pixels)
    original_cdf = compute_cdf(original_histogram)
    target_cdf = compute_cdf(target_histogram)

    # Ánh xạ giá trị pixel
    mapping = [0] * 256
    for i in range(256):
        closest_value = min(range(256), key=lambda j: abs(original_cdf[i] - target_cdf[j]))
        mapping[i] = closest_value

    # Áp dụng ánh xạ
    new_pixels = []
    for row in pixels:
        new_row = []
        for r, g, b in row:
            grayscale = int(0.299 * r + 0.587 * g + 0.114 * b)
            new_value = mapping[grayscale]
            new_row.append((new_value, new_value, new_value))
        new_pixels.append(new_row)
    return new_pixels

# Vẽ histogram
def plot_histogram(histogram, title):
    plt.bar(range(256), histogram, color='gray')
    plt.title(title)
    plt.xlabel("Giá trị mức xám")
    plt.ylabel("Số lượng pixel")
    plt.show()

# Hàm tổng hợp
def process_image(input_file, output_file, target_histogram):
    format_type = detect_format(input_file)

    if format_type == "BMP":
        width, height, pixels = read_bmp(input_file)
    elif format_type == "PPM":
        width, height, pixels = read_ppm(input_file)
    else:
        raise ValueError("Định dạng ảnh không được hỗ trợ!")

    # Vẽ histogram ảnh gốc
    original_histogram = compute_histogram(width, height, pixels)
    plot_histogram(original_histogram, "Histogram của ảnh gốc")

    # Áp dụng histogram matching
    new_pixels = histogram_matching(width, height, pixels, target_histogram)

    # Vẽ histogram ảnh sau khi matching
    new_histogram = compute_histogram(width, height, new_pixels)
    plot_histogram(new_histogram, "Histogram của ảnh sau Histogram Matching")

    # Ghi ảnh đầu ra
    if format_type == "BMP":
        write_bmp(output_file, width, height, new_pixels)
    elif format_type == "PPM":
        write_ppm(output_file, width, height, new_pixels)

    print(f"Đã xử lý ảnh và lưu tại {output_file}")

# Chạy chương trình
if __name__ == "__main__":
    input_file = "E:/Picture/Histogram Equalization/anh2.bmp"  # Hoặc input.ppm
    output_file = "output2.bmp"  # Hoặc output.ppm

    # Histogram mục tiêu (phân phối đều hoặc tuỳ chỉnh)
    target_histogram = [255 - i for i in range(256)]  # Giảm dần từ 255 về 0
    process_image(input_file, output_file, target_histogram)
